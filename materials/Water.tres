[gd_resource type="ShaderMaterial" load_steps=4 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;
render_mode cull_disabled;

vec3 lerp(vec3 a, vec3 b, float f){
	return a*f+b*(1.0-f);
}

uniform sampler2D noise;

uniform float pi = 3.1415926535897932384626433832795;

uniform float wavelength = 2.0;
uniform int numWaves = 2;
uniform float amplitude = 0.33;
uniform float speed = 0.5;
uniform vec2 direction = vec2(1.0, 1.0);


float wave(int i, float x, float y, float t){
	float frequency = 2.0 * pi / wavelength;
	float phase = speed * frequency;
	float theta = dot(direction+vec2(-float(i),float(i)), vec2(x+sin(y), y+sin(x)));
	return amplitude * sin(theta * frequency + t * phase);
}

float height(vec2 p, float t){
	float height = 0.0;
    for (int i = 0; i < numWaves; i++) {
        height += wave(i, p.x, p.y, t);
    }
    return height;
}

vec3 height_with_noise(vec2 p, float t){
	return texture(noise, sin(t/10f)*0.1+p + 0.007*(height(p*50.0, t)) ).rgb;
}

void fragment(){
	//ALBEDO = texture(noise, UV +0.007*(height(UV*50.0, TIME)) ).rgb * vec3(0.15,0.1,0.7);
	ALBEDO = height_with_noise(UV,TIME) * vec3(0.15,0.1,0.7);
	//NORMALMAP_DEPTH = height(UV*50.0, TIME);
	NORMALMAP_DEPTH = height_with_noise(UV,TIME).r;
	
	//ALPHA = 0.97
	float depth = textureLod(DEPTH_TEXTURE,SCREEN_UV,0.0).r;
	vec4 upos = INV_PROJECTION_MATRIX * vec4(SCREEN_UV*2.0-1.0,depth*2.0-1.0,1.0);
    vec3 pix_pos = upos.xyz/upos.w;
	//float refraction = pix_pos.y > 0.0 ? 0.0:0.5 ;
	float refraction = pix_pos.y;
	//if( refraction < 0.0 ) refraction = 0.0;
	
	float blur = 3.0;
	float alpha = 0.7;
	
	//vec3 ref_normal = normalize(mix(NORMAL, TANGENT*NORMALMAP.x + BINORMAL*NORMALMAP.y + NORMAL*NORMALMAP.z, NORMALMAP_DEPTH));
	EMISSION = textureLod(SCREEN_TEXTURE, SCREEN_UV, blur * height_with_noise(UV,TIME).r).rgb * (1.0-alpha);
	
	//NORMALMAP_DEPTH = texture(noise, UV +0.007*(height(UV*50.0, TIME)) ).r;
}

void vertex(){
	//VERTEX.y = height_with_noise(UV,TIME).r;
	VERTEX.y = sin(TIME/2f-1.3874)*0.04;
}

"

[sub_resource type="OpenSimplexNoise" id=2]

[sub_resource type="NoiseTexture" id=3]
seamless = true
noise = SubResource( 2 )

[resource]
shader = SubResource( 1 )
shader_param/pi = 3.14159
shader_param/wavelength = 2.0
shader_param/numWaves = 2
shader_param/amplitude = 0.33
shader_param/speed = 2.0
shader_param/direction = Vector2( 1, 1 )
shader_param/noise = SubResource( 3 )
